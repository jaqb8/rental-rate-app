// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Session {
    id           String   @id @default(cuid())
    userId       String
    expiresAt    DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activation {
    id           String   @id @default(cuid())
    userId       String
    code         String
    expiresAt    DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([code])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String   @unique
    passwordHash  String
    emailVerified DateTime?
    image         String?
    sessions      Session[]
    activations   Activation[]
    landlords     Landlord[]
    reviews       Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Landlord {
    id           String   @id @default(cuid())
    street       String
    streetNumber String
    flatNumber   String?
    city         String
    zip          String
    country      String
    lat          String
    lng          String
    photoUrl     String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    reviews      Review[]
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model Review {
    id         String   @id @default(cuid())
    title      String
    content    String
    rating     Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    landlord   Landlord @relation(fields: [landlordId], references: [id], onDelete: Cascade)
    landlordId String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
}
